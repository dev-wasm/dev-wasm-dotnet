// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
#ifndef __BINDINGS_WASI_H
#define __BINDINGS_WASI_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  uint8_t*ptr;
  size_t len;
} wasi_string_t;

// A time and date in seconds plus nanoseconds.
typedef struct {
  uint64_t seconds;
  uint32_t nanoseconds;
} wasi_clocks_0_2_0_rc_2023_11_10_wall_clock_datetime_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable_t;

typedef struct {
  wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable_t *ptr;
  size_t len;
} wasi_io_0_2_0_rc_2023_11_10_poll_list_borrow_pollable_t;

typedef struct {
  uint32_t *ptr;
  size_t len;
} wasi_io_0_2_0_rc_2023_11_10_poll_list_u32_t;

// An instant in time, in nanoseconds. An instant is relative to an
// unspecified initial value, and can only be compared to instances from
// the same monotonic-clock.
typedef uint64_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_instant_t;

// A duration of time, in nanoseconds.
typedef uint64_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_duration_t;

typedef wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_own_pollable_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} wasi_random_0_2_0_rc_2023_11_10_random_list_u8_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_error_own_error_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_error_own_error_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_error_borrow_error_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_error_borrow_error_t;

typedef wasi_io_0_2_0_rc_2023_11_10_error_own_error_t wasi_io_0_2_0_rc_2023_11_10_streams_own_error_t;

// An error for input-stream and output-stream operations.
typedef struct {
  uint8_t tag;
  union {
    wasi_io_0_2_0_rc_2023_11_10_streams_own_error_t last_operation_failed;
  } val;
} wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t;

// The last operation (a write or flush) failed before completion.
// 
// More information is available in the `error` payload.
#define WASI_IO_0_2_0_RC_2023_11_10_STREAMS_STREAM_ERROR_LAST_OPERATION_FAILED 0
// The stream is closed: no more input will be accepted by the
// stream. A closed output-stream will return this error on all
// future operations.
#define WASI_IO_0_2_0_RC_2023_11_10_STREAMS_STREAM_ERROR_CLOSED 1

typedef struct wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t;

typedef struct wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t {
  int32_t __handle;
} wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t;

typedef struct {
  bool is_err;
  union {
    wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t ok;
    wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t err;
  } val;
} wasi_io_0_2_0_rc_2023_11_10_streams_result_list_u8_stream_error_t;

typedef struct {
  bool is_err;
  union {
    uint64_t ok;
    wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t err;
  } val;
} wasi_io_0_2_0_rc_2023_11_10_streams_result_u64_stream_error_t;

typedef wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t wasi_io_0_2_0_rc_2023_11_10_streams_own_pollable_t;

typedef struct {
  bool is_err;
  union {
    wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t err;
  } val;
} wasi_io_0_2_0_rc_2023_11_10_streams_result_void_stream_error_t;

typedef wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t wasi_cli_0_2_0_rc_2023_11_10_stdout_own_output_stream_t;

typedef wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t wasi_cli_0_2_0_rc_2023_11_10_stderr_own_output_stream_t;

typedef wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t wasi_cli_0_2_0_rc_2023_11_10_stdin_own_input_stream_t;

typedef wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_duration_t wasi_http_0_2_0_rc_2023_11_10_types_duration_t;

// This type corresponds to HTTP standard Methods.
typedef struct {
  uint8_t tag;
  union {
    wasi_string_t other;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_method_t;

#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_GET 0
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_HEAD 1
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_POST 2
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_PUT 3
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_DELETE 4
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_CONNECT 5
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_OPTIONS 6
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_TRACE 7
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_PATCH 8
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_METHOD_OTHER 9

// This type corresponds to HTTP standard Related Schemes.
typedef struct {
  uint8_t tag;
  union {
    wasi_string_t other;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_scheme_t;

#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_SCHEME_HTTP 0
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_SCHEME_HTTPS 1
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_SCHEME_OTHER 2

typedef struct {
  bool is_some;
  wasi_string_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_string_t;

typedef struct {
  bool is_some;
  uint16_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_u16_t;

// Defines the case payload type for `DNS-error` above:
typedef struct {
  wasi_http_0_2_0_rc_2023_11_10_types_option_string_t rcode;
  wasi_http_0_2_0_rc_2023_11_10_types_option_u16_t info_code;
} wasi_http_0_2_0_rc_2023_11_10_types_dns_error_payload_t;

typedef struct {
  bool is_some;
  uint8_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_u8_t;

// Defines the case payload type for `TLS-alert-received` above:
typedef struct {
  wasi_http_0_2_0_rc_2023_11_10_types_option_u8_t alert_id;
  wasi_http_0_2_0_rc_2023_11_10_types_option_string_t alert_message;
} wasi_http_0_2_0_rc_2023_11_10_types_tls_alert_received_payload_t;

typedef struct {
  bool is_some;
  uint32_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t;

// Defines the case payload type for `HTTP-response-{header,trailer}-size` above:
typedef struct {
  wasi_http_0_2_0_rc_2023_11_10_types_option_string_t field_name;
  wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t field_size;
} wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_t;

typedef struct {
  bool is_some;
  uint64_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_u64_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_field_size_payload_t;

// These cases are inspired by the IANA HTTP Proxy Error Types:
// https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types
typedef struct {
  uint8_t tag;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_dns_error_payload_t dns_error;
    wasi_http_0_2_0_rc_2023_11_10_types_tls_alert_received_payload_t tls_alert_received;
    wasi_http_0_2_0_rc_2023_11_10_types_option_u64_t http_request_body_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t http_request_header_section_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_field_size_payload_t http_request_header_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t http_request_trailer_section_size;
    wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_t http_request_trailer_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t http_response_header_section_size;
    wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_t http_response_header_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_u64_t http_response_body_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t http_response_trailer_section_size;
    wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_t http_response_trailer_size;
    wasi_http_0_2_0_rc_2023_11_10_types_option_string_t http_response_transfer_coding;
    wasi_http_0_2_0_rc_2023_11_10_types_option_string_t http_response_content_coding;
    wasi_http_0_2_0_rc_2023_11_10_types_option_string_t internal_error;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_error_code_t;

#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_DNS_TIMEOUT 0
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_DNS_ERROR 1
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_DESTINATION_NOT_FOUND 2
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_DESTINATION_UNAVAILABLE 3
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_DESTINATION_IP_PROHIBITED 4
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_DESTINATION_IP_UNROUTABLE 5
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONNECTION_REFUSED 6
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONNECTION_TERMINATED 7
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONNECTION_TIMEOUT 8
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONNECTION_READ_TIMEOUT 9
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONNECTION_WRITE_TIMEOUT 10
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONNECTION_LIMIT_REACHED 11
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_TLS_PROTOCOL_ERROR 12
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_TLS_CERTIFICATE_ERROR 13
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_TLS_ALERT_RECEIVED 14
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_DENIED 15
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_LENGTH_REQUIRED 16
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_BODY_SIZE 17
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_METHOD_INVALID 18
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_URI_INVALID 19
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_URI_TOO_LONG 20
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_HEADER_SECTION_SIZE 21
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_HEADER_SIZE 22
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_TRAILER_SECTION_SIZE 23
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_REQUEST_TRAILER_SIZE 24
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_INCOMPLETE 25
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_HEADER_SECTION_SIZE 26
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_HEADER_SIZE 27
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_BODY_SIZE 28
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_TRAILER_SECTION_SIZE 29
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_TRAILER_SIZE 30
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_TRANSFER_CODING 31
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_CONTENT_CODING 32
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_RESPONSE_TIMEOUT 33
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_UPGRADE_FAILED 34
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_HTTP_PROTOCOL_ERROR 35
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_LOOP_DETECTED 36
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_CONFIGURATION_ERROR 37
// This is a catch-all error for anything that doesn't fit cleanly into a
// more specific case. It also includes an optional string for an
// unstructured description of the error. Users should not depend on the
// string for diagnosing errors, as it's not required to be consistent
// between implementations.
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_ERROR_CODE_INTERNAL_ERROR 38

// This type enumerates the different kinds of errors that may occur when
// setting or appending to a `fields` resource.
typedef struct {
  uint8_t tag;
} wasi_http_0_2_0_rc_2023_11_10_types_header_error_t;

// This error indicates that a `field-key` or `field-value` was
// syntactically invalid when used with an operation that sets headers in a
// `fields`.
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_HEADER_ERROR_INVALID_SYNTAX 0
// This error indicates that a forbidden `field-key` was used when trying
// to set a header in a `fields`.
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_HEADER_ERROR_FORBIDDEN 1
// This error indicates that the operation on the `fields` was not
// permitted because the fields are immutable.
#define WASI_HTTP_0_2_0_RC_2023_11_10_TYPES_HEADER_ERROR_IMMUTABLE 2

// Field keys are always strings.
typedef wasi_string_t wasi_http_0_2_0_rc_2023_11_10_types_field_key_t;

// Field values should always be ASCII strings. However, in
// reality, HTTP implementations often have to interpret malformed values,
// so they are provided as a list of bytes.
typedef struct {
  uint8_t *ptr;
  size_t len;
} wasi_http_0_2_0_rc_2023_11_10_types_field_value_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_request_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_request_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_response_outparam_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_response_outparam_t;

// This type corresponds to the HTTP standard Status Code.
typedef uint16_t wasi_http_0_2_0_rc_2023_11_10_types_status_code_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_response_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_response_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_body_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_body_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_future_trailers_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_future_trailers_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_trailers_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_trailers_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_body_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_body_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_own_future_incoming_response_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_own_future_incoming_response_t;

typedef struct wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_incoming_response_t {
  int32_t __handle;
} wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_incoming_response_t;

typedef wasi_io_0_2_0_rc_2023_11_10_error_borrow_error_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_io_error_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_error_code_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_error_code_t;

typedef struct {
  wasi_http_0_2_0_rc_2023_11_10_types_field_key_t f0;
  wasi_http_0_2_0_rc_2023_11_10_types_field_value_t f1;
} wasi_http_0_2_0_rc_2023_11_10_types_tuple2_field_key_field_value_t;

typedef struct {
  wasi_http_0_2_0_rc_2023_11_10_types_tuple2_field_key_field_value_t *ptr;
  size_t len;
} wasi_http_0_2_0_rc_2023_11_10_types_list_tuple2_field_key_field_value_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t ok;
    wasi_http_0_2_0_rc_2023_11_10_types_header_error_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_fields_header_error_t;

typedef struct {
  wasi_http_0_2_0_rc_2023_11_10_types_field_value_t *ptr;
  size_t len;
} wasi_http_0_2_0_rc_2023_11_10_types_list_field_value_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_header_error_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_void_header_error_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_scheme_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_scheme_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t ok;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_body_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t ok;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_body_void_t;

typedef struct {
  bool is_err;
} wasi_http_0_2_0_rc_2023_11_10_types_result_void_void_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_duration_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_duration_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t ok;
    wasi_http_0_2_0_rc_2023_11_10_types_error_code_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_response_error_code_t;

typedef wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t wasi_http_0_2_0_rc_2023_11_10_types_own_input_stream_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_input_stream_t ok;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_input_stream_void_t;

typedef wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t wasi_http_0_2_0_rc_2023_11_10_types_own_pollable_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t wasi_http_0_2_0_rc_2023_11_10_types_own_trailers_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_own_trailers_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_own_trailers_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_option_own_trailers_t ok;
    wasi_http_0_2_0_rc_2023_11_10_types_error_code_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_option_own_trailers_error_code_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_result_option_own_trailers_error_code_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_result_option_own_trailers_error_code_t;

typedef wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t wasi_http_0_2_0_rc_2023_11_10_types_own_output_stream_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_output_stream_t ok;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_output_stream_void_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_error_code_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_void_error_code_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_response_t ok;
    wasi_http_0_2_0_rc_2023_11_10_types_error_code_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_response_error_code_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_response_error_code_t ok;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_types_result_result_own_incoming_response_error_code_void_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_types_result_result_own_incoming_response_error_code_void_t val;
} wasi_http_0_2_0_rc_2023_11_10_types_option_result_result_own_incoming_response_error_code_void_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_error_code_t wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_error_code_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_outgoing_request_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_request_options_t;

typedef struct {
  bool is_some;
  wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_request_options_t val;
} wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_option_own_request_options_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_future_incoming_response_t wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_future_incoming_response_t;

typedef struct {
  bool is_err;
  union {
    wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_future_incoming_response_t ok;
    wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_error_code_t err;
  } val;
} wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_result_own_future_incoming_response_error_code_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_request_t exports_wasi_http_0_2_0_rc_2023_11_10_incoming_handler_own_incoming_request_t;

typedef wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t exports_wasi_http_0_2_0_rc_2023_11_10_incoming_handler_own_response_outparam_t;

typedef struct {
  bool is_err;
} exports_wasi_cli_0_2_0_rc_2023_11_10_run_result_void_void_t;

// Imported Functions from `wasi:clocks/wall-clock@0.2.0-rc-2023-11-10`
// Read the current value of the clock.
// 
// This clock is not monotonic, therefore calling this function repeatedly
// will not necessarily produce a sequence of non-decreasing values.
// 
// The returned timestamps represent the number of seconds since
// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
// also known as [Unix Time].
// 
// The nanoseconds field of the output is always less than 1000000000.
// 
// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
extern void wasi_clocks_0_2_0_rc_2023_11_10_wall_clock_now(wasi_clocks_0_2_0_rc_2023_11_10_wall_clock_datetime_t *ret);
// Query the resolution of the clock.
// 
// The nanoseconds field of the output is always less than 1000000000.
extern void wasi_clocks_0_2_0_rc_2023_11_10_wall_clock_resolution(wasi_clocks_0_2_0_rc_2023_11_10_wall_clock_datetime_t *ret);

// Imported Functions from `wasi:io/poll@0.2.0-rc-2023-11-10`
// Return the readiness of a pollable. This function never blocks.
// 
// Returns `true` when the pollable is ready, and `false` otherwise.
extern bool wasi_io_0_2_0_rc_2023_11_10_poll_method_pollable_ready(wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable_t self);
// `block` returns immediately if the pollable is ready, and otherwise
// blocks until ready.
// 
// This function is equivalent to calling `poll.poll` on a list
// containing only this pollable.
extern void wasi_io_0_2_0_rc_2023_11_10_poll_method_pollable_block(wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable_t self);
// Poll for completion on a set of pollables.
// 
// This function takes a list of pollables, which identify I/O sources of
// interest, and waits until one or more of the events is ready for I/O.
// 
// The result `list<u32>` contains one or more indices of handles in the
// argument list that is ready for I/O.
// 
// If the list contains more elements than can be indexed with a `u32`
// value, this function traps.
// 
// A timeout can be implemented by adding a pollable from the
// wasi-clocks API to the list.
// 
// This function does not return a `result`; polling in itself does not
// do any I/O so it doesn't fail. If any of the I/O sources identified by
// the pollables has an error, it is indicated by marking the source as
// being reaedy for I/O.
extern void wasi_io_0_2_0_rc_2023_11_10_poll_poll(wasi_io_0_2_0_rc_2023_11_10_poll_list_borrow_pollable_t *in, wasi_io_0_2_0_rc_2023_11_10_poll_list_u32_t *ret);

// Imported Functions from `wasi:clocks/monotonic-clock@0.2.0-rc-2023-11-10`
// Read the current value of the clock.
// 
// The clock is monotonic, therefore calling this function repeatedly will
// produce a sequence of non-decreasing values.
extern wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_instant_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_now(void);
// Query the resolution of the clock. Returns the duration of time
// corresponding to a clock tick.
extern wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_duration_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_resolution(void);
// Create a `pollable` which will resolve once the specified instant
// occured.
extern wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_own_pollable_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_subscribe_instant(wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_instant_t when);
// Create a `pollable` which will resolve once the given duration has
// elapsed, starting at the time at which this function was called.
// occured.
extern wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_own_pollable_t wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_subscribe_duration(wasi_clocks_0_2_0_rc_2023_11_10_monotonic_clock_duration_t when);

// Imported Functions from `wasi:random/random@0.2.0-rc-2023-11-10`
// Return `len` cryptographically-secure random or pseudo-random bytes.
// 
// This function must produce data at least as cryptographically secure and
// fast as an adequately seeded cryptographically-secure pseudo-random
// number generator (CSPRNG). It must not block, from the perspective of
// the calling program, under any circumstances, including on the first
// request and on requests for numbers of bytes. The returned data must
// always be unpredictable.
// 
// This function must always return fresh data. Deterministic environments
// must omit this function, rather than implementing it with deterministic
// data.
extern void wasi_random_0_2_0_rc_2023_11_10_random_get_random_bytes(uint64_t len, wasi_random_0_2_0_rc_2023_11_10_random_list_u8_t *ret);
// Return a cryptographically-secure random or pseudo-random `u64` value.
// 
// This function returns the same type of data as `get-random-bytes`,
// represented as a `u64`.
extern uint64_t wasi_random_0_2_0_rc_2023_11_10_random_get_random_u64(void);

// Imported Functions from `wasi:io/error@0.2.0-rc-2023-11-10`
// Returns a string that is suitable to assist humans in debugging
// this error.
// 
// WARNING: The returned string should not be consumed mechanically!
// It may change across platforms, hosts, or other implementation
// details. Parsing this string is a major platform-compatibility
// hazard.
extern void wasi_io_0_2_0_rc_2023_11_10_error_method_error_to_debug_string(wasi_io_0_2_0_rc_2023_11_10_error_borrow_error_t self, wasi_string_t *ret);

// Imported Functions from `wasi:io/streams@0.2.0-rc-2023-11-10`
// Perform a non-blocking read from the stream.
// 
// This function returns a list of bytes containing the read data,
// when successful. The returned list will contain up to `len` bytes;
// it may return fewer than requested, but not more. The list is
// empty when no bytes are available for reading at this time. The
// pollable given by `subscribe` will be ready when more bytes are
// available.
// 
// This function fails with a `stream-error` when the operation
// encounters an error, giving `last-operation-failed`, or when the
// stream is closed, giving `closed`.
// 
// When the caller gives a `len` of 0, it represents a request to
// read 0 bytes. If the stream is still open, this call should
// succeed and return an empty list, or otherwise fail with `closed`.
// 
// The `len` parameter is a `u64`, which could represent a list of u8 which
// is not possible to allocate in wasm32, or not desirable to allocate as
// as a return value by the callee. The callee may return a list of bytes
// less than `len` in size while more bytes are available for reading.
extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_input_stream_read(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t self, uint64_t len, wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
// Read bytes from a stream, after blocking until at least one byte can
// be read. Except for blocking, behavior is identical to `read`.
extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_input_stream_blocking_read(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t self, uint64_t len, wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
// Skip bytes from a stream. Returns number of bytes skipped.
// 
// Behaves identical to `read`, except instead of returning a list
// of bytes, returns the number of bytes consumed from the stream.
extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_input_stream_skip(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t self, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
// Skip bytes from a stream, after blocking until at least one byte
// can be skipped. Except for blocking behavior, identical to `skip`.
extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_input_stream_blocking_skip(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t self, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
// Create a `pollable` which will resolve once either the specified stream
// has bytes available to read or the other end of the stream has been
// closed.
// The created `pollable` is a child resource of the `input-stream`.
// Implementations may trap if the `input-stream` is dropped before
// all derived `pollable`s created with this function are dropped.
extern wasi_io_0_2_0_rc_2023_11_10_streams_own_pollable_t wasi_io_0_2_0_rc_2023_11_10_streams_method_input_stream_subscribe(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t self);
// Check readiness for writing. This function never blocks.
// 
// Returns the number of bytes permitted for the next call to `write`,
// or an error. Calling `write` with more bytes than this function has
// permitted will trap.
// 
// When this function returns 0 bytes, the `subscribe` pollable will
// become ready when this function will report at least 1 byte, or an
// error.
extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_check_write(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
// Perform a write. This function never blocks.
// 
// Precondition: check-write gave permit of Ok(n) and contents has a
// length of less than or equal to n. Otherwise, this function will trap.
// 
// returns Err(closed) without writing if the stream has closed since
// the last call to check-write provided a permit.
extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_write(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t *contents, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
// Perform a write of up to 4096 bytes, and then flush the stream. Block
// until all of these operations are complete, or an error occurs.
// 
// This is a convenience wrapper around the use of `check-write`,
// `subscribe`, `write`, and `flush`, and is implemented with the
// following pseudo-code:
// 
// ```text
// let pollable = this.subscribe();
// while !contents.is_empty() {
  // // Wait for the stream to become writable
  // poll-one(pollable);
  // let Ok(n) = this.check-write(); // eliding error handling
  // let len = min(n, contents.len());
  // let (chunk, rest) = contents.split_at(len);
  // this.write(chunk  );            // eliding error handling
  // contents = rest;
  // }
  // this.flush();
  // // Wait for completion of `flush`
  // poll-one(pollable);
  // // Check for any errors that arose during `flush`
  // let _ = this.check-write();         // eliding error handling
  // ```
  extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_blocking_write_and_flush(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t *contents, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
  // Request to flush buffered output. This function never blocks.
  // 
  // This tells the output-stream that the caller intends any buffered
  // output to be flushed. the output which is expected to be flushed
  // is all that has been passed to `write` prior to this call.
  // 
  // Upon calling this function, the `output-stream` will not accept any
  // writes (`check-write` will return `ok(0)`) until the flush has
  // completed. The `subscribe` pollable will become ready when the
  // flush has completed and the stream can accept more writes.
  extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_flush(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
  // Request to flush buffered output, and block until flush completes
  // and stream is ready for writing again.
  extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_blocking_flush(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
  // Create a `pollable` which will resolve once the output-stream
  // is ready for more writing, or an error has occured. When this
  // pollable is ready, `check-write` will return `ok(n)` with n>0, or an
  // error.
  // 
  // If the stream is closed, this pollable is always ready immediately.
  // 
  // The created `pollable` is a child resource of the `output-stream`.
  // Implementations may trap if the `output-stream` is dropped before
  // all derived `pollable`s created with this function are dropped.
  extern wasi_io_0_2_0_rc_2023_11_10_streams_own_pollable_t wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_subscribe(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self);
  // Write zeroes to a stream.
  // 
  // this should be used precisely like `write` with the exact same
  // preconditions (must use check-write first), but instead of
  // passing a list of bytes, you simply pass the number of zero-bytes
  // that should be written.
  extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_write_zeroes(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, uint64_t len, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
  // Perform a write of up to 4096 zeroes, and then flush the stream.
  // Block until all of these operations are complete, or an error
  // occurs.
  // 
  // This is a convenience wrapper around the use of `check-write`,
  // `subscribe`, `write-zeroes`, and `flush`, and is implemented with
  // the following pseudo-code:
  // 
  // ```text
  // let pollable = this.subscribe();
  // while num_zeroes != 0 {
    // // Wait for the stream to become writable
    // poll-one(pollable);
    // let Ok(n) = this.check-write(); // eliding error handling
    // let len = min(n, num_zeroes);
    // this.write-zeroes(len);         // eliding error handling
    // num_zeroes -= len;
    // }
    // this.flush();
    // // Wait for completion of `flush`
    // poll-one(pollable);
    // // Check for any errors that arose during `flush`
    // let _ = this.check-write();         // eliding error handling
    // ```
    extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_blocking_write_zeroes_and_flush(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, uint64_t len, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
    // Read from one stream and write to another.
    // 
    // The behavior of splice is equivelant to:
    // 1. calling `check-write` on the `output-stream`
    // 2. calling `read` on the `input-stream` with the smaller of the
    // `check-write` permitted length and the `len` provided to `splice`
    // 3. calling `write` on the `output-stream` with that read data.
    // 
    // Any error reported by the call to `check-write`, `read`, or
    // `write` ends the splice and reports that error.
    // 
    // This function returns the number of bytes transferred; it may be less
    // than `len`.
    extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_splice(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t src, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
    // Read from one stream and write to another, with blocking.
    // 
    // This is similar to `splice`, except that it blocks until the
    // `output-stream` is ready for writing, and the `input-stream`
    // is ready for reading, before performing the `splice`.
    extern bool wasi_io_0_2_0_rc_2023_11_10_streams_method_output_stream_blocking_splice(wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t self, wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t src, uint64_t len, uint64_t *ret, wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *err);
    
    // Imported Functions from `wasi:cli/stdout@0.2.0-rc-2023-11-10`
    extern wasi_cli_0_2_0_rc_2023_11_10_stdout_own_output_stream_t wasi_cli_0_2_0_rc_2023_11_10_stdout_get_stdout(void);
    
    // Imported Functions from `wasi:cli/stderr@0.2.0-rc-2023-11-10`
    extern wasi_cli_0_2_0_rc_2023_11_10_stderr_own_output_stream_t wasi_cli_0_2_0_rc_2023_11_10_stderr_get_stderr(void);
    
    // Imported Functions from `wasi:cli/stdin@0.2.0-rc-2023-11-10`
    extern wasi_cli_0_2_0_rc_2023_11_10_stdin_own_input_stream_t wasi_cli_0_2_0_rc_2023_11_10_stdin_get_stdin(void);
    
    // Imported Functions from `wasi:http/types@0.2.0-rc-2023-11-10`
    // Attempts to extract a http-related `error` from the wasi:io `error`
    // provided.
    // 
    // Stream operations which return
    // `wasi:io/stream/stream-error::last-operation-failed` have a payload of
    // type `wasi:io/error/error` with more information about the operation
    // that failed. This payload can be passed through to this function to see
    // if there's http-related information about the error to return.
    // 
    // Note that this function is fallible because not all io-errors are
    // http-related errors.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_http_error_code(wasi_http_0_2_0_rc_2023_11_10_types_borrow_io_error_t err_, wasi_http_0_2_0_rc_2023_11_10_types_error_code_t *ret);
    // Construct an empty HTTP Fields.
    // 
    // The resulting `fields` is mutable.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t wasi_http_0_2_0_rc_2023_11_10_types_constructor_fields(void);
    // Construct an HTTP Fields.
    // 
    // The resulting `fields` is mutable.
    // 
    // The list represents each key-value pair in the Fields. Keys
    // which have multiple values are represented by multiple entries in this
    // list with the same key.
    // 
    // The tuple is a pair of the field key, represented as a string, and
    // Value, represented as a list of bytes. In a valid Fields, all keys
    // and values are valid UTF-8 strings. However, values are not always
    // well-formed, so they are represented as a raw list of bytes.
    // 
    // An error result will be returned if any header or value was
    // syntactically invalid, or if a header was forbidden.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_static_fields_from_list(wasi_http_0_2_0_rc_2023_11_10_types_list_tuple2_field_key_field_value_t *entries, wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t *ret, wasi_http_0_2_0_rc_2023_11_10_types_header_error_t *err);
    // Get all of the values corresponding to a key.
    extern void wasi_http_0_2_0_rc_2023_11_10_types_method_fields_get(wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_10_types_field_key_t *name, wasi_http_0_2_0_rc_2023_11_10_types_list_field_value_t *ret);
    // Set all of the values for a key. Clears any existing values for that
    // key, if they have been set.
    // 
    // Fails with `header-error.immutable` if the `fields` are immutable.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_fields_set(wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_10_types_field_key_t *name, wasi_http_0_2_0_rc_2023_11_10_types_list_field_value_t *value, wasi_http_0_2_0_rc_2023_11_10_types_header_error_t *err);
    // Delete all values for a key. Does nothing if no values for the key
    // exist.
    // 
    // Fails with `header-error.immutable` if the `fields` are immutable.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_fields_delete(wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_10_types_field_key_t *name, wasi_http_0_2_0_rc_2023_11_10_types_header_error_t *err);
    // Append a value for a key. Does not change or delete any existing
    // values for that key.
    // 
    // Fails with `header-error.immutable` if the `fields` are immutable.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_fields_append(wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_10_types_field_key_t *name, wasi_http_0_2_0_rc_2023_11_10_types_field_value_t *value, wasi_http_0_2_0_rc_2023_11_10_types_header_error_t *err);
    // Retrieve the full set of keys and values in the Fields. Like the
    // constructor, the list represents each key-value pair.
    // 
    // The outer list represents each key-value pair in the Fields. Keys
    // which have multiple values are represented by multiple entries in this
    // list with the same key.
    extern void wasi_http_0_2_0_rc_2023_11_10_types_method_fields_entries(wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t self, wasi_http_0_2_0_rc_2023_11_10_types_list_tuple2_field_key_field_value_t *ret);
    // Make a deep copy of the Fields. Equivelant in behavior to calling the
    // `fields` constructor on the return value of `entries`. The resulting
    // `fields` is mutable.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t wasi_http_0_2_0_rc_2023_11_10_types_method_fields_clone(wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t self);
    // Returns the method of the incoming request.
    extern void wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_request_method(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_method_t *ret);
    // Returns the path with query parameters from the request, as a string.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_request_path_with_query(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t self, wasi_string_t *ret);
    // Returns the protocol scheme from the request.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_request_scheme(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_scheme_t *ret);
    // Returns the authority from the request, if it was present.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_request_authority(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t self, wasi_string_t *ret);
    // Get the `headers` associated with the request.
    // 
    // The returned `headers` resource is immutable: `set`, `append`, and
    // `delete` operations will fail with `header-error.immutable`.
    // 
    // The `headers` returned are a child resource: it must be dropped before
    // the parent `incoming-request` is dropped. Dropping this
    // `incoming-request` before all children are dropped will trap.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_request_headers(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t self);
    // Gives the `incoming-body` associated with this request. Will only
    // return success at most once, and subsequent calls will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_request_consume(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t *ret);
    // Construct a new `outgoing-request` with a default `method` of `GET`, and
    // `none` values for `path-with-query`, `scheme`, and `authority`.
    // 
    // * `headers` is the HTTP Headers for the Request.
    // 
    // It is possible to construct, or manipulate with the accessor functions
    // below, an `outgoing-request` with an invalid combination of `scheme`
    // and `authority`, or `headers` which are not permitted to be sent.
    // It is the obligation of the `outgoing-handler.handle` implementation
    // to reject invalid constructions of `outgoing-request`.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t wasi_http_0_2_0_rc_2023_11_10_types_constructor_outgoing_request(wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t headers);
    // Returns the resource corresponding to the outgoing Body for this
    // Request.
    // 
    // Returns success on the first call: the `outgoing-body` resource for
    // this `outgoing-request` can be retrieved at most once. Subsequent
    // calls will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_body(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t *ret);
    // Get the Method for the Request.
    extern void wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_method(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_method_t *ret);
    // Set the Method for the Request. Fails if the string present in a
    // `method.other` argument is not a syntactically valid method.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_set_method(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_method_t *method);
    // Get the combination of the HTTP Path and Query for the Request.
    // When `none`, this represents an empty Path and empty Query.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_path_with_query(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_string_t *ret);
    // Set the combination of the HTTP Path and Query for the Request.
    // When `none`, this represents an empty Path and empty Query. Fails is the
    // string given is not a syntactically valid path and query uri component.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_set_path_with_query(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_string_t *maybe_path_with_query);
    // Get the HTTP Related Scheme for the Request. When `none`, the
    // implementation may choose an appropriate default scheme.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_scheme(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_scheme_t *ret);
    // Set the HTTP Related Scheme for the Request. When `none`, the
    // implementation may choose an appropriate default scheme. Fails if the
    // string given is not a syntactically valid uri scheme.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_set_scheme(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_http_0_2_0_rc_2023_11_10_types_scheme_t *maybe_scheme);
    // Get the HTTP Authority for the Request. A value of `none` may be used
    // with Related Schemes which do not require an Authority. The HTTP and
    // HTTPS schemes always require an authority.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_authority(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_string_t *ret);
    // Set the HTTP Authority for the Request. A value of `none` may be used
    // with Related Schemes which do not require an Authority. The HTTP and
    // HTTPS schemes always require an authority. Fails if the string given is
    // not a syntactically valid uri authority.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_set_authority(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self, wasi_string_t *maybe_authority);
    // Get the headers associated with the Request.
    // 
    // The returned `headers` resource is immutable: `set`, `append`, and
    // `delete` operations will fail with `header-error.immutable`.
    // 
    // This headers resource is a child: it must be dropped before the parent
    // `outgoing-request` is dropped, or its ownership is transfered to
    // another component by e.g. `outgoing-handler.handle`.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_request_headers(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t self);
    // Construct a default `request-options` value.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t wasi_http_0_2_0_rc_2023_11_10_types_constructor_request_options(void);
    // The timeout for the initial connect to the HTTP Server.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_request_options_connect_timeout_ms(wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_10_types_duration_t *ret);
    // Set the timeout for the initial connect to the HTTP Server. An error
    // return value indicates that this timeout is not supported.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_request_options_set_connect_timeout_ms(wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_10_types_duration_t *maybe_ms);
    // The timeout for receiving the first byte of the Response body.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_request_options_first_byte_timeout_ms(wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_10_types_duration_t *ret);
    // Set the timeout for receiving the first byte of the Response body. An
    // error return value indicates that this timeout is not supported.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_request_options_set_first_byte_timeout_ms(wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_10_types_duration_t *maybe_ms);
    // The timeout for receiving subsequent chunks of bytes in the Response
    // body stream.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_request_options_between_bytes_timeout_ms(wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_10_types_duration_t *ret);
    // Set the timeout for receiving subsequent chunks of bytes in the Response
    // body stream. An error return value indicates that this timeout is not
    // supported.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_request_options_set_between_bytes_timeout_ms(wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t self, wasi_http_0_2_0_rc_2023_11_10_types_duration_t *maybe_ms);
    // Set the value of the `response-outparam` to either send a response,
    // or indicate an error.
    // 
    // This method consumes the `response-outparam` to ensure that it is
    // called at most once. If it is never called, the implementation
    // will respond with an error.
    // 
    // The user may provide an `error` to `response` to allow the
    // implementation determine how to respond with an HTTP error response.
    extern void wasi_http_0_2_0_rc_2023_11_10_types_static_response_outparam_set(wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t param, wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_response_error_code_t *response);
    // Returns the status code from the incoming response.
    extern wasi_http_0_2_0_rc_2023_11_10_types_status_code_t wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_response_status(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response_t self);
    // Returns the headers from the incoming response.
    // 
    // The returned `headers` resource is immutable: `set`, `append`, and
    // `delete` operations will fail with `header-error.immutable`.
    // 
    // This headers resource is a child: it must be dropped before the parent
    // `incoming-response` is dropped.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_response_headers(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response_t self);
    // Returns the incoming body. May be called at most once. Returns error
    // if called additional times.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_response_consume(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response_t self, wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t *ret);
    // Returns the contents of the body, as a stream of bytes.
    // 
    // Returns success on first call: the stream representing the contents
    // can be retrieved at most once. Subsequent calls will return error.
    // 
    // The returned `input-stream` resource is a child: it must be dropped
    // before the parent `incoming-body` is dropped, or consumed by
    // `incoming-body.finish`.
    // 
    // This invariant ensures that the implementation can determine whether
    // the user is consuming the contents of the body, waiting on the
    // `future-trailers` to be ready, or neither. This allows for network
    // backpressure is to be applied when the user is consuming the body,
    // and for that backpressure to not inhibit delivery of the trailers if
    // the user does not read the entire body.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_incoming_body_stream(wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_body_t self, wasi_http_0_2_0_rc_2023_11_10_types_own_input_stream_t *ret);
    // Takes ownership of `incoming-body`, and returns a `future-trailers`.
    // This function will trap if the `input-stream` child is still alive.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_future_trailers_t wasi_http_0_2_0_rc_2023_11_10_types_static_incoming_body_finish(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t this_);
    // Returns a pollable which becomes ready when either the trailers have
    // been received, or an error has occured. When this pollable is ready,
    // the `get` method will return `some`.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_pollable_t wasi_http_0_2_0_rc_2023_11_10_types_method_future_trailers_subscribe(wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_trailers_t self);
    // Returns the contents of the trailers, or an error which occured,
    // once the future is ready.
    // 
    // The outer `option` represents future readiness. Users can wait on this
    // `option` to become `some` using the `subscribe` method.
    // 
    // The `result` represents that either the HTTP Request or Response body,
    // as well as any trailers, were received successfully, or that an error
    // occured receiving them. The optional `trailers` indicates whether or not
    // trailers were present in the body.
    // 
    // When some `trailers` are returned by this method, the `trailers`
    // resource is immutable, and a child. Use of the `set`, `append`, or
    // `delete` methods will return an error, and the resource must be
    // dropped before the parent `future-trailers` is dropped.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_future_trailers_get(wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_trailers_t self, wasi_http_0_2_0_rc_2023_11_10_types_result_option_own_trailers_error_code_t *ret);
    // Construct an `outgoing-response`, with a default `status-code` of `200`.
    // If a different `status-code` is needed, it must be set via the
    // `set-status-code` method.
    // 
    // * `headers` is the HTTP Headers for the Response.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t wasi_http_0_2_0_rc_2023_11_10_types_constructor_outgoing_response(wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t headers);
    // Get the HTTP Status Code for the Response.
    extern wasi_http_0_2_0_rc_2023_11_10_types_status_code_t wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_response_status_code(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t self);
    // Set the HTTP Status Code for the Response. Fails if the status-code
    // given is not a valid http status code.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_response_set_status_code(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t self, wasi_http_0_2_0_rc_2023_11_10_types_status_code_t status_code);
    // Get the headers associated with the Request.
    // 
    // The returned `headers` resource is immutable: `set`, `append`, and
    // `delete` operations will fail with `header-error.immutable`.
    // 
    // This headers resource is a child: it must be dropped before the parent
    // `outgoing-request` is dropped, or its ownership is transfered to
    // another component by e.g. `outgoing-handler.handle`.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_headers_t wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_response_headers(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t self);
    // Returns the resource corresponding to the outgoing Body for this Response.
    // 
    // Returns success on the first call: the `outgoing-body` resource for
    // this `outgoing-response` can be retrieved at most once. Subsequent
    // calls will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_response_body(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t self, wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t *ret);
    // Returns a stream for writing the body contents.
    // 
    // The returned `output-stream` is a child resource: it must be dropped
    // before the parent `outgoing-body` resource is dropped (or finished),
    // otherwise the `outgoing-body` drop or `finish` will trap.
    // 
    // Returns success on the first call: the `output-stream` resource for
    // this `outgoing-body` may be retrieved at most once. Subsequent calls
    // will return error.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_outgoing_body_write(wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_body_t self, wasi_http_0_2_0_rc_2023_11_10_types_own_output_stream_t *ret);
    // Finalize an outgoing body, optionally providing trailers. This must be
    // called to signal that the response is complete. If the `outgoing-body`
    // is dropped without calling `outgoing-body.finalize`, the implementation
    // should treat the body as corrupted.
    // 
    // Fails if the body's `outgoing-request` or `outgoing-response` was
    // constructed with a Content-Length header, and the contents written
    // to the body (via `write`) does not match the value given in the
    // Content-Length.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_static_outgoing_body_finish(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t this_, wasi_http_0_2_0_rc_2023_11_10_types_own_trailers_t *maybe_trailers, wasi_http_0_2_0_rc_2023_11_10_types_error_code_t *err);
    // Returns a pollable which becomes ready when either the Response has
    // been received, or an error has occured. When this pollable is ready,
    // the `get` method will return `some`.
    extern wasi_http_0_2_0_rc_2023_11_10_types_own_pollable_t wasi_http_0_2_0_rc_2023_11_10_types_method_future_incoming_response_subscribe(wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_incoming_response_t self);
    // Returns the incoming HTTP Response, or an error, once one is ready.
    // 
    // The outer `option` represents future readiness. Users can wait on this
    // `option` to become `some` using the `subscribe` method.
    // 
    // The outer `result` is used to retrieve the response or error at most
    // once. It will be success on the first call in which the outer option
    // is `some`, and error on subsequent calls.
    // 
    // The inner `result` represents that either the incoming HTTP Response
    // status and headers have recieved successfully, or that an error
    // occured. Errors may also occur while consuming the response body,
    // but those will be reported by the `incoming-body` and its
    // `output-stream` child.
    extern bool wasi_http_0_2_0_rc_2023_11_10_types_method_future_incoming_response_get(wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_incoming_response_t self, wasi_http_0_2_0_rc_2023_11_10_types_result_result_own_incoming_response_error_code_void_t *ret);
    
    // Imported Functions from `wasi:http/outgoing-handler@0.2.0-rc-2023-11-10`
    // This function is invoked with an outgoing HTTP Request, and it returns
    // a resource `future-incoming-response` which represents an HTTP Response
    // which may arrive in the future.
    // 
    // The `options` argument accepts optional parameters for the HTTP
    // protocol's transport layer.
    // 
    // This function may return an error if the `outgoing-request` is invalid
    // or not allowed to be made. Otherwise, protocol errors are reported
    // through the `future-incoming-response`.
    extern bool wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_handle(wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_outgoing_request_t request, wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_request_options_t *maybe_options, wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_own_future_incoming_response_t *ret, wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_error_code_t *err);
    
    // Exported Functions from `wasi:http/incoming-handler@0.2.0-rc-2023-11-10`
    void exports_wasi_http_0_2_0_rc_2023_11_10_incoming_handler_handle(exports_wasi_http_0_2_0_rc_2023_11_10_incoming_handler_own_incoming_request_t request, exports_wasi_http_0_2_0_rc_2023_11_10_incoming_handler_own_response_outparam_t response_out);
    
    // Exported Functions from `wasi:cli/run@0.2.0-rc-2023-11-10`
    bool exports_wasi_cli_0_2_0_rc_2023_11_10_run_run(void);
    
    // Helper Functions
    
    extern void wasi_io_0_2_0_rc_2023_11_10_poll_pollable_drop_own(wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t handle);
    extern void wasi_io_0_2_0_rc_2023_11_10_poll_pollable_drop_borrow(wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t handle);
    
    extern wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable_t wasi_io_0_2_0_rc_2023_11_10_poll_borrow_pollable(wasi_io_0_2_0_rc_2023_11_10_poll_own_pollable_t handle);
    
    void wasi_io_0_2_0_rc_2023_11_10_poll_list_borrow_pollable_free(wasi_io_0_2_0_rc_2023_11_10_poll_list_borrow_pollable_t *ptr);
    
    void wasi_io_0_2_0_rc_2023_11_10_poll_list_u32_free(wasi_io_0_2_0_rc_2023_11_10_poll_list_u32_t *ptr);
    
    void wasi_random_0_2_0_rc_2023_11_10_random_list_u8_free(wasi_random_0_2_0_rc_2023_11_10_random_list_u8_t *ptr);
    
    extern void wasi_io_0_2_0_rc_2023_11_10_error_error_drop_own(wasi_io_0_2_0_rc_2023_11_10_error_own_error_t handle);
    extern void wasi_io_0_2_0_rc_2023_11_10_error_error_drop_borrow(wasi_io_0_2_0_rc_2023_11_10_error_own_error_t handle);
    
    extern wasi_io_0_2_0_rc_2023_11_10_error_borrow_error_t wasi_io_0_2_0_rc_2023_11_10_error_borrow_error(wasi_io_0_2_0_rc_2023_11_10_error_own_error_t handle);
    
    void wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_free(wasi_io_0_2_0_rc_2023_11_10_streams_stream_error_t *ptr);
    
    extern void wasi_io_0_2_0_rc_2023_11_10_streams_input_stream_drop_own(wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t handle);
    extern void wasi_io_0_2_0_rc_2023_11_10_streams_input_stream_drop_borrow(wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t handle);
    
    extern wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream_t wasi_io_0_2_0_rc_2023_11_10_streams_borrow_input_stream(wasi_io_0_2_0_rc_2023_11_10_streams_own_input_stream_t handle);
    
    extern void wasi_io_0_2_0_rc_2023_11_10_streams_output_stream_drop_own(wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t handle);
    extern void wasi_io_0_2_0_rc_2023_11_10_streams_output_stream_drop_borrow(wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t handle);
    
    extern wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream_t wasi_io_0_2_0_rc_2023_11_10_streams_borrow_output_stream(wasi_io_0_2_0_rc_2023_11_10_streams_own_output_stream_t handle);
    
    void wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_free(wasi_io_0_2_0_rc_2023_11_10_streams_list_u8_t *ptr);
    
    void wasi_io_0_2_0_rc_2023_11_10_streams_result_list_u8_stream_error_free(wasi_io_0_2_0_rc_2023_11_10_streams_result_list_u8_stream_error_t *ptr);
    
    void wasi_io_0_2_0_rc_2023_11_10_streams_result_u64_stream_error_free(wasi_io_0_2_0_rc_2023_11_10_streams_result_u64_stream_error_t *ptr);
    
    void wasi_io_0_2_0_rc_2023_11_10_streams_result_void_stream_error_free(wasi_io_0_2_0_rc_2023_11_10_streams_result_void_stream_error_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_method_free(wasi_http_0_2_0_rc_2023_11_10_types_method_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_scheme_free(wasi_http_0_2_0_rc_2023_11_10_types_scheme_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_string_free(wasi_http_0_2_0_rc_2023_11_10_types_option_string_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_u16_free(wasi_http_0_2_0_rc_2023_11_10_types_option_u16_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_dns_error_payload_free(wasi_http_0_2_0_rc_2023_11_10_types_dns_error_payload_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_u8_free(wasi_http_0_2_0_rc_2023_11_10_types_option_u8_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_tls_alert_received_payload_free(wasi_http_0_2_0_rc_2023_11_10_types_tls_alert_received_payload_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_u32_free(wasi_http_0_2_0_rc_2023_11_10_types_option_u32_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_free(wasi_http_0_2_0_rc_2023_11_10_types_field_size_payload_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_u64_free(wasi_http_0_2_0_rc_2023_11_10_types_option_u64_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_field_size_payload_free(wasi_http_0_2_0_rc_2023_11_10_types_option_field_size_payload_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_header_error_free(wasi_http_0_2_0_rc_2023_11_10_types_header_error_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_field_key_free(wasi_http_0_2_0_rc_2023_11_10_types_field_key_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_field_value_free(wasi_http_0_2_0_rc_2023_11_10_types_field_value_t *ptr);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_fields_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_fields_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_fields(wasi_http_0_2_0_rc_2023_11_10_types_own_fields_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_incoming_request_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_request_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_incoming_request_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_request_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_request(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_request_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_outgoing_request_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_outgoing_request_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_request(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_request_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_request_options_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_request_options_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_request_options(wasi_http_0_2_0_rc_2023_11_10_types_own_request_options_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_response_outparam_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_response_outparam_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_response_outparam_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_response_outparam(wasi_http_0_2_0_rc_2023_11_10_types_own_response_outparam_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_incoming_response_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_response_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_incoming_response_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_response_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_response(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_response_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_incoming_body_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_incoming_body_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_body_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_incoming_body(wasi_http_0_2_0_rc_2023_11_10_types_own_incoming_body_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_future_trailers_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_future_trailers_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_future_trailers_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_future_trailers_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_trailers_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_trailers(wasi_http_0_2_0_rc_2023_11_10_types_own_future_trailers_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_outgoing_response_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_outgoing_response_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_response(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_response_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_outgoing_body_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_outgoing_body_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_body_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_outgoing_body(wasi_http_0_2_0_rc_2023_11_10_types_own_outgoing_body_t handle);
    
    extern void wasi_http_0_2_0_rc_2023_11_10_types_future_incoming_response_drop_own(wasi_http_0_2_0_rc_2023_11_10_types_own_future_incoming_response_t handle);
    extern void wasi_http_0_2_0_rc_2023_11_10_types_future_incoming_response_drop_borrow(wasi_http_0_2_0_rc_2023_11_10_types_own_future_incoming_response_t handle);
    
    extern wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_incoming_response_t wasi_http_0_2_0_rc_2023_11_10_types_borrow_future_incoming_response(wasi_http_0_2_0_rc_2023_11_10_types_own_future_incoming_response_t handle);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_option_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_tuple2_field_key_field_value_free(wasi_http_0_2_0_rc_2023_11_10_types_tuple2_field_key_field_value_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_list_tuple2_field_key_field_value_free(wasi_http_0_2_0_rc_2023_11_10_types_list_tuple2_field_key_field_value_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_fields_header_error_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_fields_header_error_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_list_field_value_free(wasi_http_0_2_0_rc_2023_11_10_types_list_field_value_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_void_header_error_free(wasi_http_0_2_0_rc_2023_11_10_types_result_void_header_error_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_scheme_free(wasi_http_0_2_0_rc_2023_11_10_types_option_scheme_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_body_void_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_body_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_body_void_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_body_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_void_void_free(wasi_http_0_2_0_rc_2023_11_10_types_result_void_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_duration_free(wasi_http_0_2_0_rc_2023_11_10_types_option_duration_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_response_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_outgoing_response_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_input_stream_void_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_input_stream_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_own_trailers_free(wasi_http_0_2_0_rc_2023_11_10_types_option_own_trailers_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_option_own_trailers_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_result_option_own_trailers_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_result_option_own_trailers_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_option_result_option_own_trailers_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_output_stream_void_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_output_stream_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_void_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_result_void_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_response_error_code_free(wasi_http_0_2_0_rc_2023_11_10_types_result_own_incoming_response_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_result_result_own_incoming_response_error_code_void_free(wasi_http_0_2_0_rc_2023_11_10_types_result_result_own_incoming_response_error_code_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_types_option_result_result_own_incoming_response_error_code_void_free(wasi_http_0_2_0_rc_2023_11_10_types_option_result_result_own_incoming_response_error_code_void_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_error_code_free(wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_error_code_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_option_own_request_options_free(wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_option_own_request_options_t *ptr);
    
    void wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_result_own_future_incoming_response_error_code_free(wasi_http_0_2_0_rc_2023_11_10_outgoing_handler_result_own_future_incoming_response_error_code_t *ptr);
    
    void exports_wasi_cli_0_2_0_rc_2023_11_10_run_result_void_void_free(exports_wasi_cli_0_2_0_rc_2023_11_10_run_result_void_void_t *ptr);
    
    // Transfers ownership of `s` into the string `ret`
    void wasi_string_set(wasi_string_t *ret, char*s);
    
    // Creates a copy of the input nul-terminate string `s` and
    // stores it into the component model string `ret`.
    void wasi_string_dup(wasi_string_t *ret, const char*s);
    
    // Deallocates the string pointed to by `ret`, deallocating
    // the memory behind the string.
    void wasi_string_free(wasi_string_t *ret);
    
    #ifdef __cplusplus
  }
  #endif
  #endif
  